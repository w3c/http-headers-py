#!/usr/bin/python
"""
Spellchecker

URI: http://www.w3.org/2002/01/spellchecker
Maintainer: dom@w3.org

See also a version that features recursive checking:
http://www.w3.org/mid/1ce6d0230912160806x1ee6f25dgafc73865140b239e@mail.gmail.com

Share and Enjoy. Open Source license:
Copyright (c) 2001-2005 W3C (MIT, ERCIM, Keio)
http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
$Id$
 branched from v 1.46
"""

import cgi
import checkremote
import http_auth
import os
import sys
import urlparse

from cleanhtml import *
from subprocess import Popen, PIPE

languages = {"en_US":"English","fr":"French"}
def format_option(a,b,c):
        if a:
                selected=""
                if a==c:
                        selected=" selected='selected'"
                return clean_format("<option value='%s'%s>%s</option>",
                                    a, selected, b)

Page1 ="""Content-Type:text/html; charset=utf-8


<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US">
<head>
  %s
  <title>W3C Spell Checker %s</title>
  <link rel="stylesheet" href="http://www.w3.org/Stylesheets/base"/>
  <link rel="stylesheet" href="http://www.w3.org/2001/11/results"/>
  <style type="text/css">
   ul.suggestions { height:5em; overflow:auto; width:10em;}
   
  </style>
</head>

<body>
<p><a href="http://www.w3.org"><img src="http://www.w3.org/Icons/w3c_home" alt="W3C"/></a></p>

<h1>W3C Spell Checker %s</h1>

<h2>Status</h2>
<p>This tool allows you to check the spelling of a web page. It currently only supports English and French.</p>

<h2>Usage</h2>
<form action="" method="get"><p><label>URI of the document to be checked:<input type="text" value="%s" name="uri"/></label><br />
<label>Language of the document: <select name="lang">%s</select><br />
<label>Presents possible corrections: <input type="checkbox" name="suggest"%s /></label><br />
<input type="submit" value="Get results"/></p></form>
"""

Page2 = """
<h2>See also</h2>
<ul>
<li><a href="http://www.w3.org/QA/Tools">the QA Toolbox</a></li>
</ul>

<h2>References</h2>
<ul>
<li><a href="http://aspell.sourceforge.net">Aspell</a> is used in the back-end</li>
<li>The front-end is coded in <a href="http://www.python.org">Python</a></li>
</ul>
<h2>Known bugs and limitations</h2>
<ul>
<li>Doesn't handle language switching on the <code>lang</code> and <code>xml:lang</code> attributes</li>
<li>Doesn't check textual attributes (e.g. <code>title</code>, <code>alt</code>)</li>
</ul>
<hr/>
<address><a href="http://www.w3.org/People/Dom/">Dominique Haza&euml;l-Massieux</a><br/>
Last Modified: $Date$
</address>
</body>
</html>
"""

def format(fp,suggest):
	words = {}
        for line in fp:
                line = line.rstrip('\n')
		if line and line != "*" and line[0] != "@":
			parts = line.split(': ')
			fields = parts[0].split()
                        if fields[1] in words:
                                continue
			elif fields[0]=="&":
                                words[fields[1]] = parts[1].split(", ")
			elif fields[0]=="#":
                                words[fields[1]] = []
	if not words:
		print "<p><span class='yes'>No errors</span> found.</p>"
                return
        for error in sorted(words):
                clean_print("<li>\"<span class='no'>%s</span>\"", error)
                if words[error] and suggest:
                        print "; suggestions:<ul class='suggestions'>"
                        for option in words[error]:
                                clean_print("<li>%s</li>", option)
                        print "</ul>"				
                print "</li>"

def getLangSetup(fields):
        lang = fields.getfirst('lang')
        if lang not in languages:
                lang = 'en_US'
        lang_opts = ''.join(format_option(code, languages[code], lang)
                            for code in languages)
        return lang, lang_opts

def getSuggestSetup(fields):
        if fields.getfirst('suggest') == 'on':
                return True, " checked='checked'"
        return False, ""

def getURI(fields):
        uri = fields.getfirst('uri')
        if (not uri) and ('referrer' in fields):
                uri = os.environ.get('HTTP_REFERER')
        return uri

if __name__ == '__main__':
        fields = cgi.FieldStorage()
        lang, languages_options = getLangSetup(fields)
        suggest, suggest_txt = getSuggestSetup(fields)
        uri = getURI(fields)
        if not uri:
                print Page1 % ('', '', '', clean_str(uri), languages_options,
                               suggest_txt)
                print Page2
                sys.exit()

        uri_text1 = clean_format("for %s", uri)
        uri_text = clean_format(" for <a href=\"%s\">%s</a>", uri, uri)
        print Page1 % ('<meta name="ROBOTS" content="NOINDEX,NOFOLLOW"/>',
                       uri_text1, uri_text, clean_str(uri), languages_options,
                       suggest_txt)

        url_opener = http_auth.ProxyAuthURLopener()
        try:
                fp = url_opener.open(uri)
        except IOError as e:
                url_opener.error = "I/O error: %s %s" % (e.errno,e.strerror)
                fp = None
        if fp is None:
                clean_print("<p><span class='no'>Unable to read</span> <a href='%s'>%s</a> (%s). Sorry, check the URI.</p>", uri, uri, url_opener.error)
                print Page2
                sys.exit()

        headers = fp.info()
        lynx_cmd = ['/usr/bin/lynx', '-cfg=/usr/local/lib/lynx.cfg', '-nolist',
                    '-dump', '-stdin']
        if headers.has_key('Content-Type'):
                contentType = cgi.parse_header(headers['Content-Type'])
                if contentType[1].has_key('charset'):
                        lynx_cmd.append('-assume_charset=%s' %
                                        contentType[1]['charset'])

        lynx_proc = Popen(lynx_cmd, stdin=fp, stdout=PIPE)
        aspell_proc = Popen(['/usr/bin/aspell', '-a', '--encoding=utf-8',
                             '--sug-mode=fast', '--lang', lang],
                            stdin=lynx_proc.stdout, stdout=PIPE)
        lynx_proc.wait()
        lynx_proc.stdout.close()
        print "<h2>Errors found in the page</h2>"
        format(aspell_proc.stdout, suggest)
        aspell_proc.stdout.close()
        print Page2
